{"ast":null,"code":"import{Streamlit,RenderData}from\"streamlit-component-lib\";// Function to send data back to the Python script\nfunction sendFilterValue(data){Streamlit.setComponentValue(data);}// Listen for messages from the Dataiku Dashboard\nwindow.addEventListener(\"message\",event=>{// Check if the message is a filter change event\nif(event.data&&event.data.type==='filters'){console.log(\"Filter event received from Dataiku:\",event.data);// Send the filter data to the Streamlit Python backend\nsendFilterValue(event.data);}});// Initial render function (can be minimal)\nfunction onRender(event){// Tell Streamlit we're ready to start receiving data\nStreamlit.setFrameHeight(50);// Set a small height for this invisible component\n}// Render the component\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT,onRender);Streamlit.setComponentReady();","map":{"version":3,"names":["Streamlit","RenderData","sendFilterValue","data","setComponentValue","window","addEventListener","event","type","console","log","onRender","setFrameHeight","events","RENDER_EVENT","setComponentReady"],"sources":["/Users/li-hengfu/Documents/GitHub/bs-solution-medical-report-analyser/dashboard_filter_listener/frontend/src/index.js"],"sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\n\n// Function to send data back to the Python script\nfunction sendFilterValue(data) {\n  Streamlit.setComponentValue(data)\n}\n\n// Listen for messages from the Dataiku Dashboard\nwindow.addEventListener(\"message\", (event) => {\n  // Check if the message is a filter change event\n  if (event.data && event.data.type === 'filters') {\n    console.log(\"Filter event received from Dataiku:\", event.data);\n    // Send the filter data to the Streamlit Python backend\n    sendFilterValue(event.data)\n  }\n});\n\n// Initial render function (can be minimal)\nfunction onRender(event) {\n    // Tell Streamlit we're ready to start receiving data\n    Streamlit.setFrameHeight(50) // Set a small height for this invisible component\n}\n\n// Render the component\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\nStreamlit.setComponentReady()"],"mappings":"AAAA,OAASA,SAAS,CAAEC,UAAU,KAAQ,yBAAyB,CAE/D;AACA,QAAS,CAAAC,eAAeA,CAACC,IAAI,CAAE,CAC7BH,SAAS,CAACI,iBAAiB,CAACD,IAAI,CAAC,CACnC,CAEA;AACAE,MAAM,CAACC,gBAAgB,CAAC,SAAS,CAAGC,KAAK,EAAK,CAC5C;AACA,GAAIA,KAAK,CAACJ,IAAI,EAAII,KAAK,CAACJ,IAAI,CAACK,IAAI,GAAK,SAAS,CAAE,CAC/CC,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAEH,KAAK,CAACJ,IAAI,CAAC,CAC9D;AACAD,eAAe,CAACK,KAAK,CAACJ,IAAI,CAAC,CAC7B,CACF,CAAC,CAAC,CAEF;AACA,QAAS,CAAAQ,QAAQA,CAACJ,KAAK,CAAE,CACrB;AACAP,SAAS,CAACY,cAAc,CAAC,EAAE,CAAC,CAAC;AACjC,CAEA;AACAZ,SAAS,CAACa,MAAM,CAACP,gBAAgB,CAACN,SAAS,CAACc,YAAY,CAAEH,QAAQ,CAAC,CACnEX,SAAS,CAACe,iBAAiB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}